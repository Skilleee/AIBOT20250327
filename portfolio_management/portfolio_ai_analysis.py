import logging
from datetime import datetime
from portfolio_management.portfolio_google_sheets import fetch_all_portfolios

# Strategier per konto
ACCOUNT_STRATEGIES = {
    "Alice": {"horizon": 20, "risk": "medium-high"},
    "Valter": {"horizon": 20, "risk": "medium-high"},
    "Pension": {"horizon": 30, "risk": "low-medium"},
    "Investeringskonto": {"horizon": 10, "risk": "high"},
}

HIGH_GROWTH_CATEGORIES = ["AI", "Teknik", "Blockchain", "Kryptovaluta"]
DEFENSIVE_CATEGORIES = ["Global", "Tillv√§xtmarknad", "H√§lsov√•rd"]

# F√∂rslag p√• investeringar som kan anv√§ndas i olika konton
SUGGESTED_INVESTMENTS = {
    "AI": ["SEB AI - Artificial Intelligence C SEK", "iShares Robotics & AI ETF"],
    "Teknik": ["Swedbank Robur Technology", "Invesco Nasdaq 100 ETF"],
    "Global": ["Avanza Global", "L√§nsf√∂rs√§kringar Global Indexn√§ra"],
    "Tillv√§xtmarknad": ["L√§nsf√∂rs√§kringar Tillv√§xtmarknad", "Swedbank Robur EM"],
    "H√§lsov√•rd": ["Swedbank Robur Healthcare", "iShares Healthcare ETF"],
    "Kryptovaluta": ["Bitcoin Zero SEK", "Ethereum Tracker EUR XBT"],
}

logging.basicConfig(filename="ai_trading_bot.log", level=logging.INFO)

def analyze_asset(row, strategy):
    kategori = row.get("Kategori")
    v√§rde = row.get("V√§rde (SEK)", 0)
    if not kategori or not isinstance(v√§rde, (int, float)):
        return "‚ö†Ô∏è Saknar data"

    offensiv = kategori in HIGH_GROWTH_CATEGORIES
    defensiv = kategori in DEFENSIVE_CATEGORIES

    if strategy["risk"] == "high":
        return "üìà K√∂p mer" if offensiv else "ü§ù Beh√•ll" if defensiv else "üìâ S√§lj"
    elif strategy["risk"] == "medium-high":
        if offensiv and v√§rde < 1000:
            return "üìà K√∂p mer"
        elif defensiv:
            return "ü§ù Beh√•ll"
        else:
            return "üìâ S√§lj"
    elif strategy["risk"] == "low-medium":
        return "ü§ù Beh√•ll" if defensiv else "üìâ S√§lj" if offensiv else "ü§∑ Os√§ker"
    return "ü§∑ Os√§ker"

def generate_ai_recommendations():
    portfolio = fetch_all_portfolios()
    recommendations = {}

    for account, rows in portfolio.items():
        strategy = ACCOUNT_STRATEGIES.get(account, {})
        account_recs = []

        for row in rows:
            namn = row.get("Aktie/Fond/ETF", "Ok√§nd")
            kategori = row.get("Kategori", "Ok√§nd")
            v√§rde = row.get("V√§rde (SEK)", 0)
            rekommendation = analyze_asset(row, strategy)

            account_recs.append({
                "namn": namn,
                "kategori": kategori,
                "v√§rde": v√§rde,
                "rekommendation": rekommendation,
            })

        recommendations[account] = account_recs

    logging.info(f"[{datetime.now()}] üß† AI-genererade rekommendationer")
    return recommendations

def suggest_new_investments(portfolio_data):
    suggestions = {}

    for account, rows in portfolio_data.items():
        owned_categories = set(row.get("Kategori") for row in rows if row.get("Kategori"))
        strategy = ACCOUNT_STRATEGIES.get(account, {})
        account_suggestions = []

        for category, candidates in SUGGESTED_INVESTMENTS.items():
            if category not in owned_categories:
                if strategy["risk"] == "high" or (strategy["risk"] == "medium-high" and category != "Kryptovaluta"):
                    account_suggestions.append((category, candidates[0]))

        suggestions[account] = account_suggestions

    return suggestions
